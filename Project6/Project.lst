Microsoft (R) Macro Assembler Version 14.29.30154.0	    06/08/24 18:56:40
#Program Template     (template.asm			     Page 1 - 1


				TITLE Program Template     (template.asm)

				; Author: Alex Clark
				; Last Modified: 06/06/2024
				; OSU email address: clarka8@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6   Due Date: 06/09/2024
				; Description: Working with strings and macros.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Macros

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Display a prompt, and then get the users input and put it into a memory location.
				;
				; Preconditions: None
				;
				; Receives:
				;	prompt (Reference) = Prompt to display before reading input 
				;	inCount (Value) = Max length string that can be read to the string 
				;
				; Returns:
				;	output (Reference) = String that is read from console 
				;	outCount (Reference) = Length of string outputted 
				; ---------------------------------------------------------------------------------
				mGetString MACRO prompt:REQ, output:REQ, inCount:REQ, outCount:REQ
					PUSH			EDX
					PUSH			ECX
					PUSH			EAX
					mDisplayString	prompt
					MOV				EDX, output
					MOV				ECX, inCount
					CALL			ReadString
					MOV				[outCount], EAX
					POP				EAX
					POP				ECX
					POP				EDX
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Display a string from a memory location.
				;
				; Preconditions: None
				;
				; Receives:
				;	string (Reference) = String to display
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO string:REQ
					PUSH	EDX
				    MOV		EDX, string
				    CALL	WriteString
					POP		EDX
				ENDM

				; Constants

 = 0000000A			INPUT_LEN = 10
 = 0000000B			FINAL_LEN = 11
 = 0000000A			NUMS = 10

 = 00000039			MAX_ASCII = 57
 = 00000030			MIN_ASCII = 48
 = 0000002D			NEGATIVE = 45
 = 0000002B			POSITIVE = 43

 00000000			.data

 00000000 53 74 72 69 6E	intro		BYTE	"Strings and Macros - Alex Clark",0
	   67 73 20 61 6E
	   64 20 4D 61 63
	   72 6F 73 20 2D
	   20 41 6C 65 78
	   20 43 6C 61 72
	   6B 00
 00000020 49 6E 70 75 74	desc1		BYTE	"Input 3 signed integers that can fit within a 32 bit register.",0
	   20 33 20 73 69
	   67 6E 65 64 20
	   69 6E 74 65 67
	   65 72 73 20 74
	   68 61 74 20 63
	   61 6E 20 66 69
	   74 20 77 69 74
	   68 69 6E 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2E 00
 0000005F 41 66 74 65 72	desc2		BYTE	"After inputting them, they will be displayed, along with their sum and average.",0
	   20 69 6E 70 75
	   74 74 69 6E 67
	   20 74 68 65 6D
	   2C 20 74 68 65
	   79 20 77 69 6C
	   6C 20 62 65 20
	   64 69 73 70 6C
	   61 79 65 64 2C
	   20 61 6C 6F 6E
	   67 20 77 69 74
	   68 20 74 68 65
	   69 72 20 73 75
	   6D 20 61 6E 64
	   20 61 76 65 72
	   61 67 65 2E 00
 000000AF  0000000A [		numArray	SDWORD	NUMS DUP(0)
	    00000000
	   ]
 000000D7 45 6E 74 65 72	inputPrompt	BYTE	"Enter a negative or positive number with 8 or less digits: ",0
	   20 61 20 6E 65
	   67 61 74 69 76
	   65 20 6F 72 20
	   70 6F 73 69 74
	   69 76 65 20 6E
	   75 6D 62 65 72
	   20 77 69 74 68
	   20 38 20 6F 72
	   20 6C 65 73 73
	   20 64 69 67 69
	   74 73 3A 20 00
 00000113 4E 65 67 61 74	negError	BYTE	"Negative symbol must be the first character in your input.",0
	   69 76 65 20 73
	   79 6D 62 6F 6C
	   20 6D 75 73 74
	   20 62 65 20 74
	   68 65 20 66 69
	   72 73 74 20 63
	   68 61 72 61 63
	   74 65 72 20 69
	   6E 20 79 6F 75
	   72 20 69 6E 70
	   75 74 2E 00
 0000014E 50 6F 73 69 74	posError	BYTE	"Positive symbol must be the first character in your input.",0
	   69 76 65 20 73
	   79 6D 62 6F 6C
	   20 6D 75 73 74
	   20 62 65 20 74
	   68 65 20 66 69
	   72 73 74 20 63
	   68 61 72 61 63
	   74 65 72 20 69
	   6E 20 79 6F 75
	   72 20 69 6E 70
	   75 74 2E 00
 00000189 49 6E 76 61 6C	asciiError	BYTE	"Invalid character used when typing Signed Int.",0
	   69 64 20 63 68
	   61 72 61 63 74
	   65 72 20 75 73
	   65 64 20 77 68
	   65 6E 20 74 79
	   70 69 6E 67 20
	   53 69 67 6E 65
	   64 20 49 6E 74
	   2E 00
 000001B8 49 6E 70 75 74	emptyError	BYTE	"Input was empty, please try again.",0
	   20 77 61 73 20
	   65 6D 70 74 79
	   2C 20 70 6C 65
	   61 73 65 20 74
	   72 79 20 61 67
	   61 69 6E 2E 00
 000001DB 54 68 65 20 66	showNums	BYTE	"The following numbers were entered: ",0
	   6F 6C 6C 6F 77
	   69 6E 67 20 6E
	   75 6D 62 65 72
	   73 20 77 65 72
	   65 20 65 6E 74
	   65 72 65 64 3A
	   20 00
 00000200 20 00			space		BYTE	" ",0
 00000202 00000000		sum			SDWORD	0
 00000206 54 68 65 20 73	showSum		BYTE	"The sum of the numbers entered is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 65 6E
	   74 65 72 65 64
	   20 69 73 3A 20
	   00
 0000022A 54 68 65 20 61	showAvg		BYTE	"The average of the numbers entered is: ",0
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 65 6E 74
	   65 72 65 64 20
	   69 73 3A 20 00

 00000000			.code
 00000000			main PROC
				; Intro
					mDisplayString	OFFSET intro
 00000000  52		     1		PUSH	EDX
 00000001  BA 00000000 R     1	    MOV		EDX, OFFSET intro
 00000006  E8 00000000 E     1	    CALL	WriteString
 0000000B  5A		     1		POP		EDX
 0000000C  E8 00000000 E		CALL			CrLf
 00000011  E8 00000000 E		CALL			CrLf
					mDisplayString	OFFSET desc1
 00000016  52		     1		PUSH	EDX
 00000017  BA 00000020 R     1	    MOV		EDX, OFFSET desc1
 0000001C  E8 00000000 E     1	    CALL	WriteString
 00000021  5A		     1		POP		EDX
 00000022  E8 00000000 E		CALL			CrLf
					mDisplayString	OFFSET desc2
 00000027  52		     1		PUSH	EDX
 00000028  BA 0000005F R     1	    MOV		EDX, OFFSET desc2
 0000002D  E8 00000000 E     1	    CALL	WriteString
 00000032  5A		     1		POP		EDX
 00000033  E8 00000000 E		CALL			CrLf
 00000038  E8 00000000 E		CALL			CrLf
				; Get Array of user inputted numbers
 0000003D  BF 000000AF R		MOV				EDI, OFFSET numArray
 00000042  B9 0000000A			MOV				ECX, NUMS
 00000047			_inputLoop:
 00000047  57				PUSH			EDI
 00000048  68 000001B8 R		PUSH			OFFSET emptyError
 0000004D  68 00000189 R		PUSH			OFFSET asciiError
 00000052  68 0000014E R		PUSH			OFFSET posError
 00000057  68 00000113 R		PUSH			OFFSET negError
 0000005C  68 000000D7 R		PUSH			OFFSET inputPrompt
 00000061  E8 0000009F			CALL			ReadVal
 00000066  83 C7 04			ADD				EDI,4
 00000069  E2 DC			LOOP			_inputLoop

				; Display numbers
					mDisplayString	OFFSET showNums
 0000006B  52		     1		PUSH	EDX
 0000006C  BA 000001DB R     1	    MOV		EDX, OFFSET showNums
 00000071  E8 00000000 E     1	    CALL	WriteString
 00000076  5A		     1		POP		EDX
 00000077  B9 0000000A			MOV				ECX, NUMS
 0000007C  BF 000000AF R		MOV				EDI, OFFSET numArray
 00000081			_displayLoop:
 00000081  FF 37			PUSH			[EDI]
 00000083  E8 0000016E			CALL			WriteVal
					mDisplayString	OFFSET space
 00000088  52		     1		PUSH	EDX
 00000089  BA 00000200 R     1	    MOV		EDX, OFFSET space
 0000008E  E8 00000000 E     1	    CALL	WriteString
 00000093  5A		     1		POP		EDX
 00000094  83 C7 04			ADD				EDI, 4
 00000097  E2 E8			LOOP			_displayLoop
 00000099  E8 00000000 E		CALL			CrLf
 0000009E  E8 00000000 E		CALL			CrLf
				; Calculate and display sum
					mDisplayString	OFFSET showSum
 000000A3  52		     1		PUSH	EDX
 000000A4  BA 00000206 R     1	    MOV		EDX, OFFSET showSum
 000000A9  E8 00000000 E     1	    CALL	WriteString
 000000AE  5A		     1		POP		EDX
 000000AF  B9 0000000A			MOV				ECX, NUMS
 000000B4  BF 000000AF R		MOV				EDI, OFFSET numArray
 000000B9			_sumLoop:
 000000B9  A1 00000202 R		MOV				EAX, sum
 000000BE  03 07			ADD				EAX, [EDI]
 000000C0  A3 00000202 R		MOV				sum, EAX
 000000C5  83 C7 04			ADD				EDI, 4
 000000C8  E2 EF			LOOP			_sumLoop

 000000CA  FF 35 00000202 R		PUSH			sum
 000000D0  E8 00000121			CALL			WriteVal
 000000D5  E8 00000000 E		CALL			CrLf

				; Calculate and display average
					mDisplayString	OFFSET showAvg
 000000DA  52		     1		PUSH	EDX
 000000DB  BA 0000022A R     1	    MOV		EDX, OFFSET showAvg
 000000E0  E8 00000000 E     1	    CALL	WriteString
 000000E5  5A		     1		POP		EDX
 000000E6  A1 00000202 R		MOV				EAX, sum
 000000EB  99				CDQ
 000000EC  BB 0000000A			MOV				EBX, NUMS
 000000F1  F7 FB			IDIV			EBX
 000000F3  50				PUSH			EAX
 000000F4  E8 000000FD			CALL			WriteVal
 000000F9  E8 00000000 E		CALL			CrLf



					Invoke ExitProcess,0	; exit to operating system
 000000FE  6A 00	   *	    push   +000000000h
 00000100  E8 00000000 E   *	    call   ExitProcess
 00000105			main ENDP

				; Procedures

				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Read an inputted number as a string, validate it, and store it as an SDWORD.
				;
				; Preconditions: None
				;
				; Postconditions: None
				;
				; Receives:
				;	[EBP+8] = prompt (Reference) - Prompt to be shown to the user
				;	[EBP+12] = negError (Reference) - Error to be shown if there is a negative symbol in the wrong place.
				;	[EBP+16] = posError	(Reference) - Error to be shown if there is a plus symbol in the wrong place.
				;	[EBP+20] = asciiError (Reference) - Error to be shown if there are invalid characters.
				;	[EBP+24] = emptyError (Reference) - Error to be shown if nothing is typed.
				;		
				;
				; Returns:
				;	[EBP+28] = validatedInput (Reference) - The user input once it has been checked and converted.
				; ---------------------------------------------------------------------------------
 00000105			ReadVal PROC USES EAX EDI ECX ESI EBX
					LOCAL		promptPtr:DWORD

					LOCAL		stringInput[INPUT_LEN]:BYTE
					LOCAL		inputPtr:DWORD

					LOCAL		strLen:DWORD
					LOCAL		strLenPtr:DWORD

					LOCAL		total:SDWORD
					LOCAL		makeNeg:BYTE
					

 00000105  55		   *	    push   ebp
 00000106  8B EC	   *	    mov    ebp, esp
 00000108  83 C4 DC	   *	    add    esp, 0FFFFFFDCh
 0000010B  50		   *	    push   eax
 0000010C  57		   *	    push   edi
 0000010D  51		   *	    push   ecx
 0000010E  56		   *	    push   esi
 0000010F  53		   *	    push   ebx
 00000110			_startTI:
					; Initialize Variables
 00000110  C6 45 DF 00			MOV			makeNeg,0
 00000114  C7 45 E8			MOV			strLen, 0
	   00000000
 0000011B  C7 45 E0			MOV			total, 0
	   00000000
 00000122  8B 45 08			MOV			EAX, [EBP+8]		; Transfer address of prompt to promptPtr variable
 00000125  89 45 FC			MOV			promptPtr, EAX
					
					; Local variables cannot use OFFSET, 
					; so you have to use LEA to move the memory address and then move it to a variable.
 00000128  8D 45 F2			LEA			EAX, stringInput	
 0000012B  89 45 EC			MOV			inputPtr, EAX

 0000012E  8D 45 E8			LEA			EAX, strLen
 00000131  89 45 E4			MOV			strLenPtr, EAX

					; Get user input after prompt.
					mGetString	promptPtr, inputPtr, INPUT_LEN, strLen
 00000134  52		     1		PUSH			EDX
 00000135  51		     1		PUSH			ECX
 00000136  50		     1		PUSH			EAX
 00000137  52		     2		PUSH	EDX
 00000138  8B 55 FC	     2	    MOV		EDX, promptPtr
 0000013B  E8 00000000 E     2	    CALL	WriteString
 00000140  5A		     2		POP		EDX
 00000141  8B 55 EC	     1		MOV				EDX, inputPtr
 00000144  B9 0000000A	     1		MOV				ECX, INPUT_LEN
 00000149  E8 00000000 E     1		CALL			ReadString
 0000014E  89 45 E8	     1		MOV				[strLen], EAX
 00000151  58		     1		POP				EAX
 00000152  59		     1		POP				ECX
 00000153  5A		     1		POP				EDX
					
					; Convert ASCII to SDWORD

 00000154  8B 4D E8			MOV			ECX,strLen
 00000157  8B 75 EC			MOV			ESI,inputPtr

 0000015A			_TILoop:
 0000015A  FC				CLD
 0000015B  AC				LODSB
 0000015C  3C 2D			CMP			AL, NEGATIVE
 0000015E  74 25			JE			_TINegative
 00000160  3C 2B			CMP			AL, POSITIVE
 00000162  74 2C			JE			_TIPositive
 00000164  3C 00			CMP			AL,0
 00000166  74 62			JE			_ErrorEmpty
 00000168  3C 39			CMP			AL,MAX_ASCII
 0000016A  7F 4D			JG			_ErrorAscii
 0000016C  3C 30			CMP			AL,MIN_ASCII
 0000016E  7C 49			JL			_ErrorAscii
					; Convert from ASCII to number
 00000170  2C 30			SUB			AL,48

 00000172  50				PUSH		EAX
					; Multiply by 10 to clear up ones place
 00000173  6B 45 E0 0A			IMUL		EAX, total, 10
 00000177  89 45 E0			MOV			total, EAX
 0000017A  58				POP			EAX
					; Add new number to the right hand side
 0000017B  0F BE D8			MOVSX		EBX, AL
 0000017E  01 5D E0			ADD			total, EBX


 00000181			_endTILoop:
 00000181  E2 D7			LOOP		_TILoop

 00000183  EB 59			JMP			_endTI

 00000185			_TINegative:
					; If not first char, error
 00000185  3B 4D E8			CMP			ECX,strLen
 00000188  75 0D			JNZ			_ErrorNeg
 0000018A  C6 45 DF 01			MOV			makeNeg, 1
 0000018E  EB F1			JMP			_endTILoop

 00000190			_TIPositive:
						; If not first char, error
 00000190  3B 4D E8			CMP			ECX,strLen
 00000193  75 13			JNZ			_ErrorPos
 00000195  EB EA			JMP			_endTILoop


 00000197			_ErrorNeg:
					mDisplayString	[EBP+12]
 00000197  52		     1		PUSH	EDX
 00000198  8B 55 0C	     1	    MOV		EDX, [EBP+12]
 0000019B  E8 00000000 E     1	    CALL	WriteString
 000001A0  5A		     1		POP		EDX
 000001A1  E8 00000000 E		CALL			CrLf
 000001A6  EB 47			JMP				_endErrTI

 000001A8			_ErrorPos:
					mDisplayString	[EBP+16]
 000001A8  52		     1		PUSH	EDX
 000001A9  8B 55 10	     1	    MOV		EDX, [EBP+16]
 000001AC  E8 00000000 E     1	    CALL	WriteString
 000001B1  5A		     1		POP		EDX
 000001B2  E8 00000000 E		CALL			CrLf
 000001B7  EB 36			JMP				_endErrTI

 000001B9			_ErrorAscii:
					mDisplayString	[EBP+20]
 000001B9  52		     1		PUSH	EDX
 000001BA  8B 55 14	     1	    MOV		EDX, [EBP+20]
 000001BD  E8 00000000 E     1	    CALL	WriteString
 000001C2  5A		     1		POP		EDX
 000001C3  E8 00000000 E		CALL			CrLf
 000001C8  EB 25			JMP				_endErrTI

 000001CA			_ErrorEmpty:
					mDisplayString	[EBP+24]
 000001CA  52		     1		PUSH	EDX
 000001CB  8B 55 18	     1	    MOV		EDX, [EBP+24]
 000001CE  E8 00000000 E     1	    CALL	WriteString
 000001D3  5A		     1		POP		EDX
 000001D4  E8 00000000 E		CALL			CrLf
 000001D9  E9 FFFFFF32			JMP				_startTI
					

 000001DE			_endTI:

 000001DE  80 7D DF 01			CMP			makeNeg,1
 000001E2  75 03			JNE			_notNegTI
 000001E4  F7 5D E0			NEG			total

 000001E7			_notNegTI:
 000001E7  8B 5D 1C			MOV		EBX,[EBP+28]
 000001EA  8B 45 E0			MOV		EAX, total
 000001ED  89 03			MOV		[EBX], EAX
 000001EF			_endErrTI:
					RET
 000001EF  5B		   *	    pop    ebx
 000001F0  5E		   *	    pop    esi
 000001F1  59		   *	    pop    ecx
 000001F2  5F		   *	    pop    edi
 000001F3  58		   *	    pop    eax
 000001F4  C9		   *	    leave  
 000001F5  C3		   *	    ret    00000h
 000001F6			ReadVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Convert a SDWORD into an ascii string of digits
				;
				; Preconditions: None
				;
				; Postconditions: None
				;
				; Receives:
				;	[EBP+8] = value (Value) - The SDWORD number to be converted.
				;		
				;
				; Returns: None
				; ---------------------------------------------------------------------------------
 000001F6			WriteVal PROC USES EAX EDX EBX ESI EDI ECX
					LOCAL		numString[FINAL_LEN]:BYTE
					LOCAL		numCopy:SDWORD
					LOCAL		isNeg:BYTE

 000001F6  55		   *	    push   ebp
 000001F7  8B EC	   *	    mov    ebp, esp
 000001F9  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 000001FC  50		   *	    push   eax
 000001FD  52		   *	    push   edx
 000001FE  53		   *	    push   ebx
 000001FF  56		   *	    push   esi
 00000200  57		   *	    push   edi
 00000201  51		   *	    push   ecx
 00000202  C6 45 EF 00			MOV			isNeg, 0
 00000206  B9 0000000B			MOV			ECX, FINAL_LEN
 0000020B  8D 7D F5			LEA			EDI, numString
 0000020E  FC				CLD
 0000020F  B0 30			MOV			AL,48
 00000211  F3/ AA			REP			STOSB		
					
 00000213  8B 45 08			MOV			EAX,[EBP+8]
 00000216  89 45 F0			MOV			numCopy, EAX
 00000219  FD				STD

 0000021A  83 7D F0 00			CMP			numCopy,0
 0000021E  7D 07			JGE			_TSLoop
 00000220  F7 5D F0			NEG			numCopy
 00000223  C6 45 EF 01			MOV			isNeg, 1
 00000227			_TSLoop:
 00000227  8B 45 F0			MOV			EAX, numCopy
 0000022A  99				CDQ
 0000022B  BB 0000000A			MOV			EBX, 10
 00000230  F7 FB			IDIV		EBX
 00000232  89 45 F0			MOV			numCopy, EAX
 00000235  8B C2			MOV			EAX,  EDX
 00000237  04 30			ADD			AL, 48
 00000239  AA				STOSB
 0000023A  83 7D F0 00			CMP			numCopy,0
 0000023E  75 E7			JNE			_TSLoop
					
					; Check if negative at the end
 00000240  80 7D EF 01			CMP			isNeg, 1
 00000244  75 05			JNE			_notNegTS
 00000246  B0 2D			MOV			AL,NEGATIVE
 00000248  AA				STOSB
 00000249  EB 03			JMP			_endTS

 0000024B			_notNegTS:
 0000024B  B0 2B			MOV			AL,POSITIVE
 0000024D  AA				STOSB

 0000024E			_endTS:
 0000024E  83 C7 01			ADD			EDI,1
					mDisplayString EDI
 00000251  52		     1		PUSH	EDX
 00000252  8B D7	     1	    MOV		EDX, EDI
 00000254  E8 00000000 E     1	    CALL	WriteString
 00000259  5A		     1		POP		EDX
					RET
 0000025A  59		   *	    pop    ecx
 0000025B  5F		   *	    pop    edi
 0000025C  5E		   *	    pop    esi
 0000025D  5B		   *	    pop    ebx
 0000025E  5A		   *	    pop    edx
 0000025F  58		   *	    pop    eax
 00000260  C9		   *	    leave  
 00000261  C3		   *	    ret    00000h
 00000262			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30154.0	    06/08/24 18:56:40
#Program Template     (template.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000252 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000262 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000105 _TEXT	Length= 000000F1 Public STDCALL
  promptPtr  . . . . . . . . . .	DWord	 bp - 00000004
  stringInput  . . . . . . . . .	Byte	 bp - 0000000E
  inputPtr . . . . . . . . . . .	DWord	 bp - 00000014
  strLen . . . . . . . . . . . .	DWord	 bp - 00000018
  strLenPtr  . . . . . . . . . .	DWord	 bp - 0000001C
  total  . . . . . . . . . . . .	DWord	 bp - 00000020
  makeNeg  . . . . . . . . . . .	Byte	 bp - 00000021
  _startTI . . . . . . . . . . .	L Near	 00000110 _TEXT	
  _TILoop  . . . . . . . . . . .	L Near	 0000015A _TEXT	
  _endTILoop . . . . . . . . . .	L Near	 00000181 _TEXT	
  _TINegative  . . . . . . . . .	L Near	 00000185 _TEXT	
  _TIPositive  . . . . . . . . .	L Near	 00000190 _TEXT	
  _ErrorNeg  . . . . . . . . . .	L Near	 00000197 _TEXT	
  _ErrorPos  . . . . . . . . . .	L Near	 000001A8 _TEXT	
  _ErrorAscii  . . . . . . . . .	L Near	 000001B9 _TEXT	
  _ErrorEmpty  . . . . . . . . .	L Near	 000001CA _TEXT	
  _endTI . . . . . . . . . . . .	L Near	 000001DE _TEXT	
  _notNegTI  . . . . . . . . . .	L Near	 000001E7 _TEXT	
  _endErrTI  . . . . . . . . . .	L Near	 000001EF _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001F6 _TEXT	Length= 0000006C Public STDCALL
  numString  . . . . . . . . . .	Byte	 bp - 0000000B
  numCopy  . . . . . . . . . . .	DWord	 bp - 00000010
  isNeg  . . . . . . . . . . . .	Byte	 bp - 00000011
  _TSLoop  . . . . . . . . . . .	L Near	 00000227 _TEXT	
  _notNegTS  . . . . . . . . . .	L Near	 0000024B _TEXT	
  _endTS . . . . . . . . . . . .	L Near	 0000024E _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000105 Public STDCALL
  _inputLoop . . . . . . . . . .	L Near	 00000047 _TEXT	
  _displayLoop . . . . . . . . .	L Near	 00000081 _TEXT	
  _sumLoop . . . . . . . . . . .	L Near	 000000B9 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FINAL_LEN  . . . . . . . . . . .	Number	 0000000Bh   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INPUT_LEN  . . . . . . . . . . .	Number	 0000000Ah   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_ASCII  . . . . . . . . . . .	Number	 00000039h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN_ASCII  . . . . . . . . . . .	Number	 00000030h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NEGATIVE . . . . . . . . . . . .	Number	 0000002Dh   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUMS . . . . . . . . . . . . . .	Number	 0000000Ah   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
POSITIVE . . . . . . . . . . . .	Number	 0000002Bh   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
asciiError . . . . . . . . . . .	Byte	 00000189 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
desc1  . . . . . . . . . . . . .	Byte	 00000020 _DATA	
desc2  . . . . . . . . . . . . .	Byte	 0000005F _DATA	
emptyError . . . . . . . . . . .	Byte	 000001B8 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputPrompt  . . . . . . . . . .	Byte	 000000D7 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
negError . . . . . . . . . . . .	Byte	 00000113 _DATA	
numArray . . . . . . . . . . . .	DWord	 000000AF _DATA	
posError . . . . . . . . . . . .	Byte	 0000014E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
showAvg  . . . . . . . . . . . .	Byte	 0000022A _DATA	
showNums . . . . . . . . . . . .	Byte	 000001DB _DATA	
showSum  . . . . . . . . . . . .	Byte	 00000206 _DATA	
space  . . . . . . . . . . . . .	Byte	 00000200 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000202 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
